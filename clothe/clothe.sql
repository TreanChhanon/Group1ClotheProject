--------------------------------------------------------
--  File created - Sunday-March-19-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table TBLCATEGORIES
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLCATEGORIES" 
   (	"CATEGORYID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CATEGORYNAME" VARCHAR2(50 BYTE), 
	"DESCRIPTION" VARCHAR2(100 BYTE), 
	"CREATEDDATE" DATE DEFAULT sysdate, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBLCUSTOMERS
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLCUSTOMERS" 
   (	"CUSTOMERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMERNAME" VARCHAR2(50 BYTE), 
	"JOBTITLE" VARCHAR2(50 BYTE), 
	"PHONE" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"PASSWORD" VARCHAR2(50 BYTE), 
	"ADDRESS" VARCHAR2(100 BYTE), 
	"MEMBERID" NUMBER, 
	"CREATEDDATE" DATE DEFAULT sysdate, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBLEMPLOYEES
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLEMPLOYEES" 
   (	"EMPLOYEEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EMPLOYEENAME" VARCHAR2(50 BYTE), 
	"USERNAME" VARCHAR2(50 BYTE), 
	"PASSWORD" VARCHAR2(50 BYTE), 
	"USERTYPE" VARCHAR2(50 BYTE), 
	"ROLE" VARCHAR2(50 BYTE), 
	"JOBTITLE" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"PHONE" VARCHAR2(50 BYTE), 
	"ADDRESS" VARCHAR2(100 BYTE), 
	"CREATEDDATE" DATE DEFAULT sysdate, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE), 
	"PHOTO" BLOB, 
	"ISDELETE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("PHOTO") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW 4000 CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 262144 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TBLMEMBERS
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLMEMBERS" 
   (	"MEMBERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MEMBERNAME" VARCHAR2(50 BYTE), 
	"DISCOUNT" NUMBER, 
	"CREATEDDATE" DATE DEFAULT sysdate, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBLORDERS
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLORDERS" 
   (	"ORDERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMERID" NUMBER, 
	"PRODUCTID" NUMBER, 
	"PRODUCTSIZE" VARCHAR2(30 BYTE), 
	"PRODUCTCOLOR" VARCHAR2(30 BYTE), 
	"CREATEDDATE" DATE DEFAULT sysdate, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE), 
	"STATUS" VARCHAR2(30 BYTE), 
	"TOTALPRICE" NUMBER(*,0), 
	"ORDERQTY" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBLPAYMENTS
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLPAYMENTS" 
   (	"PAYMENTID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMERID" NUMBER, 
	"TOTALPRICE" NUMBER(18,2), 
	"PAYMENTTYPE" VARCHAR2(30 BYTE) DEFAULT 'Cash', 
	"CREATEDDATE" DATE DEFAULT sysdate, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE), 
	"TOTALQTY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBLPRODUCTS
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLPRODUCTS" 
   (	"PRODUCTID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PRODUCTNAME" VARCHAR2(50 BYTE), 
	"DESCRIPTION" VARCHAR2(100 BYTE), 
	"BARCODE" NUMBER, 
	"QTY" NUMBER, 
	"UNITPRICEIN" NUMBER(10,2), 
	"UNITPRICEOUT" NUMBER(10,2), 
	"CREATEDDATE" DATE DEFAULT sysdate, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE), 
	"PRODUCTIMAGE" BLOB, 
	"ISDELETED" NUMBER DEFAULT 0, 
	"CATEGORYID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("PRODUCTIMAGE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW 4000 CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 262144 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TBLPURCHASE
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLPURCHASE" 
   (	"PURCHASEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EMPLOYEEID" NUMBER, 
	"ITEMNAME" VARCHAR2(50 BYTE), 
	"PURCHASEDATE" DATE, 
	"CREATEDDATE" DATE, 
	"CREATEDBY" VARCHAR2(50 BYTE), 
	"UPDATEDDATE" VARCHAR2(50 BYTE), 
	"UPDATEDBY" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBLPURCHASEDETAILS
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLPURCHASEDETAILS" 
   (	"PURCHASEID" NUMBER, 
	"PRODUCTID" NUMBER, 
	"PURCHASEQTY" NUMBER, 
	"CREATEDDATE" DATE, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBLSALESDETAILS
--------------------------------------------------------

  CREATE TABLE "CLOTHE"."TBLSALESDETAILS" 
   (	"ORDERID" NUMBER, 
	"PRODUCTID" NUMBER, 
	"QTYSALES" NUMBER, 
	"CREATEDDATE" DATE, 
	"CREATEDBY" VARCHAR2(30 BYTE), 
	"UPDATEDDATE" DATE, 
	"UPDATEDBY" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View COUNT_ALL_SALES
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."COUNT_ALL_SALES" ("QTY") AS 
  SELECT SUM(orderqty) as Qty 
    
FROM tblOrders WHERE status='paid' Order By orderqty
;
--------------------------------------------------------
--  DDL for View DAILYREPORT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."DAILYREPORT" ("ID", "CUSTOMERNAME", "ITEM", "QUANTITY", "UNITPRICE", "TOTALPRICE", "IMG", "STATUS", "CREATEDDATE") AS 
  SELECT "ID","CUSTOMERNAME","ITEM","QUANTITY","UNITPRICE","TOTALPRICE","IMG","STATUS","CREATEDDATE" FROM view_all_order_admin where createddate >= CURRENT_DATE - 1
   AND createddate <  CURRENT_DATE
 ORDER BY createddate DESC
;
--------------------------------------------------------
--  DDL for View INVOICE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."INVOICE" ("ID", "ITEM", "COLOR", "ITEMSIZE", "QUANTITY", "UNITPRICE", "TOTALPRICE", "ORDERDATE", "CUSTOMERID") AS 
  SELECT 
    d.orderid as ID, a.productname as Item, (d.productcolor)as Color, (d.productsize) as ItemSize, d.orderqty as Quantity
    , (a.unitpriceout) AS UnitPrice, d.totalprice, d.createddate as orderdate, d.CustomerID
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid AND d.status ='notpaid' Order By d.OrderID DESC
;
--------------------------------------------------------
--  DDL for View LASTTWOWEEK
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."LASTTWOWEEK" ("ID", "CUSTOMERNAME", "ITEM", "QUANTITY", "UNITPRICE", "TOTALPRICE", "IMG", "STATUS", "CREATEDDATE") AS 
  SELECT "ID","CUSTOMERNAME","ITEM","QUANTITY","UNITPRICE","TOTALPRICE","IMG","STATUS","CREATEDDATE" FROM view_all_order_admin where createddate <= CURRENT_DATE - 14
   AND createddate <  CURRENT_DATE
 ORDER BY createddate DESC
;
--------------------------------------------------------
--  DDL for View MALECLOTHE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."MALECLOTHE" ("PRODUCTID", "NAME", "IMAGE", "PRICE") AS 
  SELECT p.ProductID, p.ProductName as Name, p.ProductImage As Image, p.UnitPriceOut as Price
    FROM tblProducts p, tblCategories c WHERE p.categoryid=c.categoryid AND c.categoryname ='Man' AND p.Isdeleted=0
;
--------------------------------------------------------
--  DDL for View MONTHLYREPORT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."MONTHLYREPORT" ("ID", "CUSTOMERNAME", "ITEM", "QUANTITY", "UNITPRICE", "TOTALPRICE", "IMG", "STATUS", "CREATEDDATE") AS 
  SELECT "ID","CUSTOMERNAME","ITEM","QUANTITY","UNITPRICE","TOTALPRICE","IMG","STATUS","CREATEDDATE" FROM view_all_order_admin where createddate >= CURRENT_DATE - 30
   AND createddate <  CURRENT_DATE
 ORDER BY createddate DESC
;
--------------------------------------------------------
--  DDL for View SUMAMOUNT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."SUMAMOUNT" ("TOTALAMOUNT") AS 
  select SUM(totalprice) as totalamount from invoice
;
--------------------------------------------------------
--  DDL for View TOTAL
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."TOTAL" ("QTYTOTAL") AS 
  SELECT 
    SUM(orderqty) as qtytotal
FROM tblOrders
;
--------------------------------------------------------
--  DDL for View VIEW2
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW2" ("ID", "ITEM", "QTY") AS 
  select id, item, sum(quantity) as QTY from view1 group by id, item order by sum(quantity)
;
--------------------------------------------------------
--  DDL for View VIEW3
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW3" ("QTY") AS 
  SELECT 
    SUM(weeklyreport.Quantity) as QTY
FROM 
    WeeklyReport, tblproducts where tblproducts.productid= weeklyreport.id order by productname desc
;
--------------------------------------------------------
--  DDL for View VIEW4
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW4" ("ITEM", "ALLPRICES") AS 
  SELECT 
    item, (select sum(quantity) from weeklyreport) as AllPrices from weeklyreport order by item
;
--------------------------------------------------------
--  DDL for View VIEWCHATSALE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEWCHATSALE" ("QTY", "DTE") AS 
  SELECT Sum(QUANTITY) AS QTY, TRUNC(CREATEDDATE)as dte FROM view_all_order_admin where status = 'paid' AND  createddate >= CURRENT_DATE - 7
   AND createddate <  CURRENT_DATE GROUP BY TRUNC(CREATEDDATE),STATUS ORDER BY TRUNC(CREATEDDATE) DESC
;
--------------------------------------------------------
--  DDL for View VIEWCHILD
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEWCHILD" ("PRODUCTID", "NAME", "IMAGE", "PRICE") AS 
  SELECT p.ProductID, p.ProductName as Name, p.ProductImage As Image, p.UnitPriceOut as Price
    FROM tblProducts p, tblCategories c WHERE p.categoryid=c.categoryid AND c.categoryname ='Child' AND p.Isdeleted=0
;
--------------------------------------------------------
--  DDL for View VIEWORDER
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEWORDER" ("ID", "ITEM", "COLOR", "PSIZE", "QUANTITY", "UNITPRICE", "TOTALPRICE", "PRODUCTIMAGE") AS 
  SELECT 
    d.orderid as ID, a.productname as Item, (d.productcolor)as Color, (d.productsize) as pSize, d.orderqty as Quantity
    , (a.unitpriceout) AS UnitPrice, d.totalprice , a.productimage
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid
;
--------------------------------------------------------
--  DDL for View VIEWORDER2
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEWORDER2" ("ID", "ITEM", "COLOR", "PSIZE", "QUANTITY", "UNITPRICE", "TOTALPRICE", "IMG", "CUSTOMERID") AS 
  SELECT 
    d.orderid as ID, a.productname as Item, (d.productcolor)as Color, (d.productsize) as pSize, d.orderqty as Quantity
    , (a.unitpriceout) AS UnitPrice, d.totalprice, a.productimage as img, d.customerid
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid AND d.status='notpaid' Order By d.OrderID DESC
;
--------------------------------------------------------
--  DDL for View VIEWTOP3
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEWTOP3" ("ITEM", "QTY") AS 
  select item, sum(quantity) as qty from weeklyreport where status='paid' group by item order by sum(quantity) DESC FETCH FIRST 3 ROWS ONLY
;
--------------------------------------------------------
--  DDL for View VIEW_ADMIN_PURCHASE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_ADMIN_PURCHASE" ("ID", "NAME", "STAFF", "BUYDATE", "CREATEDDATE", "CREATEDBY", "UPDATEDDATE", "UPDATEDBY") AS 
  select p.purchaseid as ID, p.ITEMNAME as name, e.employeename as staff, p.purchasedate as buydate, p.createddate, p.createdby, p.updateddate, p.updatedby from tblpurchase p, tblemployees e where p.employeeid = e.employeeid order by p.purchaseid desc
;
--------------------------------------------------------
--  DDL for View VIEW_ALL_ORDER_ADMIN
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_ALL_ORDER_ADMIN" ("ID", "CUSTOMERNAME", "ITEM", "QUANTITY", "UNITPRICE", "TOTALPRICE", "IMG", "STATUS", "CREATEDDATE") AS 
  SELECT 
    d.orderid as ID,c.CustomerName , a.productname as Item, d.orderqty as Quantity
    , (a.unitpriceout) AS UnitPrice, d.totalprice, a.productimage as img, d.status, d.createddate
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid  Order By d.OrderID DESC
;
--------------------------------------------------------
--  DDL for View VIEW_ALL_PAYMENTS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_ALL_PAYMENTS" ("PAYMENTID", "ID", "PAYMENTTYPE", "ITEMQTY", "AMOUNTUSD", "PAIDDATE") AS 
  SELECT 
    PaymentID,CustomerID as ID, paymenttype, TotalQty as ItemQty, totalprice as AmountUSD,createddate as PaidDate
FROM 
    tblPayments
;
--------------------------------------------------------
--  DDL for View VIEW_DISCOUNT_MEMBER
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_DISCOUNT_MEMBER" ("CUSTOMERID", "DISCOUNT") AS 
  SELECT tblCustomers.customerid, tblMembers.discount FROM tblmembers, tblcustomers WHERE tblcustomers.memberid = tblmembers.memberid
;
--------------------------------------------------------
--  DDL for View VIEW_ITEM_ADMIN
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_ITEM_ADMIN" ("QTY") AS 
  SELECT COUNT(PRODUCTID) as qty
    
FROM 
     tblProducts
;
--------------------------------------------------------
--  DDL for View VIEW_ORDER_FOR_ADMIN
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_ORDER_FOR_ADMIN" ("ID", "CUSTOMER", "ITEM", "PSIZE", "COLOR", "QUANTITY", "UNITPRICE", "TOTALPRICE", "IMG", "STATUS", "CREATEDDATE", "CREATEDBY", "UPDATEDDATE", "UPDATEDBY") AS 
  SELECT
d.orderid as ID,c.CustomerName as Customer , a.productname as Item, d.productsize as psize, d.productcolor as color, d.orderqty as Quantity
    , (a.unitpriceout) AS UnitPrice, d.totalprice, a.productimage as img, d.status, d.createddate, d.createdby,d.updateddate, d.updatedby
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid  Order By d.OrderID DESC
;
--------------------------------------------------------
--  DDL for View VIEW_PAYMENT_FOR_ADMIN
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_PAYMENT_FOR_ADMIN" ("PAYMENTID", "CUSTOMER", "TYPE", "ITEMQTY", "AMOUNTUSD", "PAIDDATE") AS 
  select a.paymentid, c.customername as customer, a.paymenttype as type, a.itemqty, a.amountusd, a.paiddate from view_all_payments a, tblcustomers c where a.ID = c.customerid order by a.paiddate DESC
;
--------------------------------------------------------
--  DDL for View VIEW_PRODUCT_SEARCH
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_PRODUCT_SEARCH" ("PRODUCTID", "NAME", "IMAGE", "PRICE") AS 
  SELECT p.ProductID,p.ProductName as Name, p.ProductImage As Image, p.UnitPriceOut as Price
    FROM tblProducts p, tblCategories c WHERE p.categoryid=c.categoryid AND ( c.categoryname ='FamaleBigini' OR c.categoryname ='Woman' ) AND p.Isdeleted=0 Order By p.productID
;
--------------------------------------------------------
--  DDL for View VIEW_PURCHASEDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_PURCHASEDETAILS" ("PURCHASEID", "PRODUCTNAME", "PURCHASEQTY", "CREATEDDATE", "CREATEDBY", "UPDATEDDATE", "UPDATEDBY") AS 
  SELECT 
    tblPurchaseDetails.PurchaseID, tblProducts.ProductName,tblPurchaseDetails.PURCHASEQTY,
    tblPurchaseDetails.CreatedDate, tblPurchaseDetails.Createdby, tblPurchaseDetails.Updateddate, tblPurchaseDetails.Updatedby
FROM 
    
tblPurchaseDetails, tblPurchase, tblProducts WHERE tblPurchaseDetails.PurchaseID= tblPurchase.PurchaseID
 AND tblPurchaseDetails.ProductID=tblProducts.ProductID AND tblPurchaseDetails.PurchaseID>0
;
--------------------------------------------------------
--  DDL for View VIEW_SALESDETAILS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_SALESDETAILS" ("ORDERID", "PRODUCTNAME", "QTYSALES", "CREATEDDATE", "CREATEDBY", "UPDATEDDATE", "UPDATEDBY") AS 
  SELECT 
    tblOrders.OrderID, tblProducts.ProductName, tblSalesDetails.QTYSALES, tblSalesDetails.CreatedDate,
    tblSalesDetails.CreatedBy,tblSalesDetails.UpdatedDate,tblSalesDetails.UpdatedBy
FROM 
    
tblSalesDetails, tblOrders, tblProducts WHERE 
tblSalesDetails.orderid= tblOrders.Orderid AND tblSalesDetails.ProductID = tblProducts.ProductID Order by tblsalesdetails.orderid DESC
;
--------------------------------------------------------
--  DDL for View VIEW_SALES_FOR_ID
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_SALES_FOR_ID" ("ORDERID", "CUSTOMERID", "PRODUCTID", "PRODUCTSIZE", "PRODUCTCOLOR", "ORDERQTY", "TOTALPRICE", "CREATEDDATE", "CREATEDBY", "UPDATEDDATE", "UPDATEDBY", "STATUS") AS 
  SELECT 
    "ORDERID","CUSTOMERID","PRODUCTID","PRODUCTSIZE","PRODUCTCOLOR","ORDERQTY","TOTALPRICE","CREATEDDATE","CREATEDBY","UPDATEDDATE","UPDATEDBY","STATUS" 
FROM 
    tblorders
;
--------------------------------------------------------
--  DDL for View VIEW_TOTAL_EARNING
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."VIEW_TOTAL_EARNING" ("TOTAL") AS 
  SELECT 
    SUM(TOTALPRICE) as total
FROM tblOrders where status ='paid'
;
--------------------------------------------------------
--  DDL for View WEEKLYREPORT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CLOTHE"."WEEKLYREPORT" ("ID", "CUSTOMERNAME", "ITEM", "QUANTITY", "UNITPRICE", "TOTALPRICE", "IMG", "STATUS", "CREATEDDATE") AS 
  SELECT "ID","CUSTOMERNAME","ITEM","QUANTITY","UNITPRICE","TOTALPRICE","IMG","STATUS","CREATEDDATE" FROM view_all_order_admin where createddate >= CURRENT_DATE - 7
   AND createddate <  CURRENT_DATE
 ORDER BY createddate DESC
;
REM INSERTING into CLOTHE.TBLCATEGORIES
SET DEFINE OFF;
Insert into CLOTHE.TBLCATEGORIES (CATEGORYID,CATEGORYNAME,DESCRIPTION,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (4,'Man','MenClothe',to_date('12/03/23','DD/MM/RR'),'Sakavy',null,null);
Insert into CLOTHE.TBLCATEGORIES (CATEGORYID,CATEGORYNAME,DESCRIPTION,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (5,'Woman','Female',to_date('12/03/23','DD/MM/RR'),'Sakavy',null,null);
Insert into CLOTHE.TBLCATEGORIES (CATEGORYID,CATEGORYNAME,DESCRIPTION,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (6,'Child','Child',to_date('12/03/23','DD/MM/RR'),'Sakavy',null,null);
REM INSERTING into CLOTHE.TBLCUSTOMERS
SET DEFINE OFF;
Insert into CLOTHE.TBLCUSTOMERS (CUSTOMERID,CUSTOMERNAME,JOBTITLE,PHONE,EMAIL,PASSWORD,ADDRESS,MEMBERID,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (3,'leanghout2','ss','123123','leang@gmail.com','123','123',1,to_date('12/03/23','DD/MM/RR'),'admin',to_date('12/03/23','DD/MM/RR'),'admin');
Insert into CLOTHE.TBLCUSTOMERS (CUSTOMERID,CUSTOMERNAME,JOBTITLE,PHONE,EMAIL,PASSWORD,ADDRESS,MEMBERID,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (2,'sakavy','student','123123','sakavy@gmail.com','123','sr',1,to_date('12/03/23','DD/MM/RR'),'admin',null,null);
REM INSERTING into CLOTHE.TBLEMPLOYEES
SET DEFINE OFF;
Insert into CLOTHE.TBLEMPLOYEES (EMPLOYEEID,EMPLOYEENAME,USERNAME,PASSWORD,USERTYPE,ROLE,JOBTITLE,EMAIL,PHONE,ADDRESS,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETE) values (1,'Aly Sakavy','admin','123','admin','admin','admin','sakavyaly@gmail.com','123','siem reap ',to_date('21/11/22','DD/MM/RR'),'Sakavy',null,null,0);
Insert into CLOTHE.TBLEMPLOYEES (EMPLOYEEID,EMPLOYEENAME,USERNAME,PASSWORD,USERTYPE,ROLE,JOBTITLE,EMAIL,PHONE,ADDRESS,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETE) values (3,'trean chhanon','nun','123','manager','admin','sr','sr@gmail.com','123123','serwear',to_date('12/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin',null);
Insert into CLOTHE.TBLEMPLOYEES (EMPLOYEEID,EMPLOYEENAME,USERNAME,PASSWORD,USERTYPE,ROLE,JOBTITLE,EMAIL,PHONE,ADDRESS,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETE) values (4,'heng kimlong','kimlong','123','member','member','sr','kimlong@gmail.com','123123','sr',to_date('19/03/23','DD/MM/RR'),'admin',null,null,null);
Insert into CLOTHE.TBLEMPLOYEES (EMPLOYEEID,EMPLOYEENAME,USERNAME,PASSWORD,USERTYPE,ROLE,JOBTITLE,EMAIL,PHONE,ADDRESS,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETE) values (2,'leanghout','leanghout','123','admin','admin','sr','sr@gmail.com','123123','sr',to_date('12/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin',null);
REM INSERTING into CLOTHE.TBLMEMBERS
SET DEFINE OFF;
Insert into CLOTHE.TBLMEMBERS (MEMBERID,MEMBERNAME,DISCOUNT,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (1,'Sakavy Aly',20,to_date('27/11/22','DD/MM/RR'),'Sakavy',null,null);
REM INSERTING into CLOTHE.TBLORDERS
SET DEFINE OFF;
Insert into CLOTHE.TBLORDERS (ORDERID,CUSTOMERID,PRODUCTID,PRODUCTSIZE,PRODUCTCOLOR,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,STATUS,TOTALPRICE,ORDERQTY) values (54,3,10,'S','Black',to_date('15/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin','paid',9,3);
Insert into CLOTHE.TBLORDERS (ORDERID,CUSTOMERID,PRODUCTID,PRODUCTSIZE,PRODUCTCOLOR,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,STATUS,TOTALPRICE,ORDERQTY) values (55,3,12,'S','Black',to_date('16/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin','paid',9,3);
Insert into CLOTHE.TBLORDERS (ORDERID,CUSTOMERID,PRODUCTID,PRODUCTSIZE,PRODUCTCOLOR,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,STATUS,TOTALPRICE,ORDERQTY) values (56,3,14,'S','Black',to_date('17/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin','paid',9,4);
Insert into CLOTHE.TBLORDERS (ORDERID,CUSTOMERID,PRODUCTID,PRODUCTSIZE,PRODUCTCOLOR,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,STATUS,TOTALPRICE,ORDERQTY) values (57,3,13,'S','Black',to_date('18/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin','paid',9,6);
Insert into CLOTHE.TBLORDERS (ORDERID,CUSTOMERID,PRODUCTID,PRODUCTSIZE,PRODUCTCOLOR,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,STATUS,TOTALPRICE,ORDERQTY) values (52,3,9,'S','Black',to_date('19/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin','paid',600,5);
Insert into CLOTHE.TBLORDERS (ORDERID,CUSTOMERID,PRODUCTID,PRODUCTSIZE,PRODUCTCOLOR,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,STATUS,TOTALPRICE,ORDERQTY) values (53,3,10,'S','Black',to_date('14/03/23','DD/MM/RR'),'admin',to_date('19/03/23','DD/MM/RR'),'admin','paid',9,11);
Insert into CLOTHE.TBLORDERS (ORDERID,CUSTOMERID,PRODUCTID,PRODUCTSIZE,PRODUCTCOLOR,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,STATUS,TOTALPRICE,ORDERQTY) values (61,2,14,'S','Black',to_date('19/03/23','DD/MM/RR'),'sakavy',to_date('19/03/23','DD/MM/RR'),'sakavy','Cancel',100,1);
REM INSERTING into CLOTHE.TBLPAYMENTS
SET DEFINE OFF;
Insert into CLOTHE.TBLPAYMENTS (PAYMENTID,CUSTOMERID,TOTALPRICE,PAYMENTTYPE,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,TOTALQTY) values (25,3,600,'Cash',to_date('19/03/23','DD/MM/RR'),'admin',null,null,3);
Insert into CLOTHE.TBLPAYMENTS (PAYMENTID,CUSTOMERID,TOTALPRICE,PAYMENTTYPE,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,TOTALQTY) values (26,3,9,'Cash',to_date('19/03/23','DD/MM/RR'),'admin',null,null,3);
REM INSERTING into CLOTHE.TBLPRODUCTS
SET DEFINE OFF;
Insert into CLOTHE.TBLPRODUCTS (PRODUCTID,PRODUCTNAME,DESCRIPTION,BARCODE,QTY,UNITPRICEIN,UNITPRICEOUT,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETED,CATEGORYID) values (10,'Dior Clothe Men','sr',22,2,1,3,to_date('12/03/23','DD/MM/RR'),'admin',to_date('12/03/23','DD/MM/RR'),'admin',0,4);
Insert into CLOTHE.TBLPRODUCTS (PRODUCTID,PRODUCTNAME,DESCRIPTION,BARCODE,QTY,UNITPRICEIN,UNITPRICEOUT,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETED,CATEGORYID) values (12,'Dress','sr',222,100,50,200,to_date('15/03/23','DD/MM/RR'),'admin',null,null,0,6);
Insert into CLOTHE.TBLPRODUCTS (PRODUCTID,PRODUCTNAME,DESCRIPTION,BARCODE,QTY,UNITPRICEIN,UNITPRICEOUT,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETED,CATEGORYID) values (14,'Woman Dress','srr',123123,30,30,100,to_date('15/03/23','DD/MM/RR'),'admin',null,null,0,5);
Insert into CLOTHE.TBLPRODUCTS (PRODUCTID,PRODUCTNAME,DESCRIPTION,BARCODE,QTY,UNITPRICEIN,UNITPRICEOUT,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETED,CATEGORYID) values (9,'Dior Clothe','sr',123,12,1,2,to_date('12/03/23','DD/MM/RR'),'admin',null,null,0,5);
Insert into CLOTHE.TBLPRODUCTS (PRODUCTID,PRODUCTNAME,DESCRIPTION,BARCODE,QTY,UNITPRICEIN,UNITPRICEOUT,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETED,CATEGORYID) values (13,'Kid Pant','sr',123123,100,40,90,to_date('15/03/23','DD/MM/RR'),'admin',null,null,0,6);
Insert into CLOTHE.TBLPRODUCTS (PRODUCTID,PRODUCTNAME,DESCRIPTION,BARCODE,QTY,UNITPRICEIN,UNITPRICEOUT,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY,ISDELETED,CATEGORYID) values (11,'ADDIDAS','ser',123123,100,50,100,to_date('15/03/23','DD/MM/RR'),'admin',null,null,0,4);
REM INSERTING into CLOTHE.TBLPURCHASE
SET DEFINE OFF;
Insert into CLOTHE.TBLPURCHASE (PURCHASEID,EMPLOYEEID,ITEMNAME,PURCHASEDATE,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (2,3,'sd',to_date('12/03/23','DD/MM/RR'),to_date('12/03/23','DD/MM/RR'),'admin',null,null);
Insert into CLOTHE.TBLPURCHASE (PURCHASEID,EMPLOYEEID,ITEMNAME,PURCHASEDATE,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (3,2,'fff',to_date('12/03/23','DD/MM/RR'),to_date('12/03/23','DD/MM/RR'),'admin',null,null);
REM INSERTING into CLOTHE.TBLPURCHASEDETAILS
SET DEFINE OFF;
Insert into CLOTHE.TBLPURCHASEDETAILS (PURCHASEID,PRODUCTID,PURCHASEQTY,CREATEDDATE,CREATEDBY,UPDATEDDATE,UPDATEDBY) values (3,9,2,to_date('12/03/23','DD/MM/RR'),'admin',null,null);
REM INSERTING into CLOTHE.TBLSALESDETAILS
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index TBLPURCHASEDETAILS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLPURCHASEDETAILS_PK" ON "CLOTHE"."TBLPURCHASEDETAILS" ("PURCHASEID", "PRODUCTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLPRODUCT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLPRODUCT_PK" ON "CLOTHE"."TBLPRODUCTS" ("PRODUCTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLMEMBER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLMEMBER_PK" ON "CLOTHE"."TBLMEMBERS" ("MEMBERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLCATEGORIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLCATEGORIES_PK" ON "CLOTHE"."TBLCATEGORIES" ("CATEGORYID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLSALESDETAILS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLSALESDETAILS_PK" ON "CLOTHE"."TBLSALESDETAILS" ("ORDERID", "PRODUCTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLEMPLOYEES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLEMPLOYEES_PK" ON "CLOTHE"."TBLEMPLOYEES" ("EMPLOYEEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLPAYMNET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLPAYMNET_PK" ON "CLOTHE"."TBLPAYMENTS" ("PAYMENTID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLORDERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLORDERS_PK" ON "CLOTHE"."TBLORDERS" ("ORDERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLPURCHASE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLPURCHASE_PK" ON "CLOTHE"."TBLPURCHASE" ("PURCHASEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBLCUSTOMER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLOTHE"."TBLCUSTOMER_PK" ON "CLOTHE"."TBLCUSTOMERS" ("CUSTOMERID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TRIGGER_STOCK_IN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CLOTHE"."TRIGGER_STOCK_IN" 
AFTER INSERT OR DELETE OR UPDATE
ON tblPurchasedetails
FOR EACH ROW
DECLARE
BEGIN
    IF INSERTING THEN
       UPDATE tblproducts SET qty = qty + :new.PURCHASEQTY 
       WHERE productid = :new.productid;
    ELSIF UPDATING THEN
        UPDATE tblproducts SET qty = qty - :old.PURCHASEQTY
        WHERE productid = :old.productid;

        UPDATE tblproducts SET qty = qty + :new.PURCHASEQTY 
        WHERE productid = :new.productid;
     ELSIF DELETING THEN
        UPDATE tblproducts SET qty = qty - :old.PURCHASEQTY
        WHERE productid = :old.productid;    
    END IF;
END;

/
ALTER TRIGGER "CLOTHE"."TRIGGER_STOCK_IN" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRIGGER_STOCK_OUT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CLOTHE"."TRIGGER_STOCK_OUT" 
AFTER INSERT OR DELETE OR UPDATE
ON tblSalesDetails
FOR EACH ROW
DECLARE
BEGIN
    IF INSERTING THEN
       UPDATE tblproducts SET qty = qty - :new.QTYSALES 
       WHERE productid = :new.productid;
    ELSIF UPDATING THEN
        UPDATE tblproducts SET qty = qty + :old.QTYSALES
        WHERE productid = :old.productid;

        UPDATE tblproducts SET qty = qty - :new.QTYSALES 
        WHERE productid = :new.productid;
     ELSIF DELETING THEN
        UPDATE tblproducts SET qty = qty + :old.QTYSALES
        WHERE productid = :old.productid;    
    END IF;
END;

/
ALTER TRIGGER "CLOTHE"."TRIGGER_STOCK_OUT" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADDADMINORDERFORM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDADMINORDERFORM" 
(
    cid tblorders.customerid%TYPE,
    pid tblorders.productid%TYPE,
    psize tblorders.productsize%TYPE,
    pcolor tblorders.productcolor%TYPE,
    qty tblorders.orderqty%TYPE,
    total tblorders.totalprice%TYPE,
    cby tblorders.createdby%TYPE
)

IS
    BEGIN

    INSERT INTO tblorders(customerid,productid,productsize,productcolor,orderqty,totalprice,createddate,createdby,status) VALUES
    (cid,pid,psize,pcolor,qty,total,sysdate,cby,'notpaid');


END;


/
--------------------------------------------------------
--  DDL for Procedure ADDADMINPURCHASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDADMINPURCHASE" 
(
   empid tblPurchase.Employeeid%TYPE,
   item tblPurchase.itemname%TYPE,
   pdate tblPurchase.purchasedate%TYPE,
   cby tblPurchase.Createdby%TYPE
)
IS

BEGIN

    INSERT INTO tblPurchase(EmployeeID,itemname,PurchaseDate,CreatedDate,CreatedBY)
    VALUES(empid,item,pdate,sysdate,cby);


END;


/
--------------------------------------------------------
--  DDL for Procedure ADDCATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDCATEGORY" (
    vCateName tblcategories.categoryname%TYPE,
    vDesc tblcategories.description%TYPE,
    vCreateby tblcategories.createdby%TYPE
    )
IS
    BEGIN

    INSERT INTO tblcategories(categoryname,description,createddate,createdby)
    VALUES (vCateName,vDesc,SYSDATE,vCreateby);
END;


/
--------------------------------------------------------
--  DDL for Procedure ADDCUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDCUSTOMER" (

name tblCustomers.CustomerName%TYPE,
job tblCustomers.jobtitle%TYPE,
ph tblCustomers.Phone%TYPE,
em tblCustomers.Email%TYPE,
pass tblcustomers.password%TYPE,
add tblCustomers.Address %TYPE,
id tblCustomers.MemberID%TYPE,
cby tblCustomers.CreatedBy%TYPE
)
IS
BEGIN

  INSERT INTO tblCustomers(CustomerName,JobTitle,Phone,Email,password,Address,MemberID,CREATEDDATE,createdby)
  VALUES(name,job,ph,em,pass,add,id,sysdate,cby);

END;


/
--------------------------------------------------------
--  DDL for Procedure ADDEMPLOYEES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDEMPLOYEES" (
   ename tblemployees.employeename%TYPE,
    uname tblemployees.username%TYPE,
    password tblemployees.password%TYPE,
    utype tblemployees.usertype%TYPE,
    role tblemployees.role%TYPE,
    title tblemployees.jobtitle%TYPE,
    email tblemployees.email%TYPE,
    phone tblemployees.phone%TYPE,
    address tblemployees.address%TYPE,
   createby tblemployees.createdby%TYPE,
   img tblemployees.photo%TYPE
    )
IS
    BEGIN

    INSERT INTO tblemployees(employeename,username,password,usertype,role,
    jobtitle,email,phone,address,createddate,
    createdby,photo) VALUES (ename,uname,password,utype,role,title,email,phone,address,sysdate, createby, img);


    END;


/
--------------------------------------------------------
--  DDL for Procedure ADDMEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDMEMBER" (

name tblMembers.membername%TYPE,
dis tblMembers.Discount%TYPE,
cby tblMembers.CreatedBy%TYPE
)
IS
BEGIN

    INSERT INTO tblMembers(MemberName,Discount,CreatedDate,CreatedBy) VALUES
    (name,dis,sysdate,cby);

END;


/
--------------------------------------------------------
--  DDL for Procedure ADDORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDORDER" (
    
    cid tblOrders.customerid%TYPE,
    pid tblOrders.productid%TYPE,
     siz tblOrders.productsize%TYPE,
    coll tblOrders.productcolor%TYPE,
    qty tblOrders.OrderQty%TYPE,
    total tblOrders.TotalPrice%TYPE,
    cby tblOrders.Createdby%TYPE

)

IS
BEGIN

  INSERT INTO tblOrders(customerid,productid,productsize,productcolor,OrderQty,TotalPrice,Createddate,Createdby,status)
  VALUES(cid,pid,siz,coll,qty,total,sysdate,cby,'notpaid');

END;


/
--------------------------------------------------------
--  DDL for Procedure ADDPAYMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDPAYMENT" (

id tblPayments.CustomerID%TYPE,
total tblPayments.totalprice%TYPE,
ptype tblpayments.paymenttype%TYPE,
cby tblpayments.createdby%TYPE,
qty tblpayments.totalqty%TYPE

)
IS
BEGIN

    INSERT INTO tblPayments(customerid,totalprice,paymenttype,createdby,totalqty) VALUES
    (id,total,ptype,cby,qty);

END;


/
--------------------------------------------------------
--  DDL for Procedure ADDPAYMENTADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDPAYMENTADMIN" (

id tblPayments.CustomerID%TYPE,
total tblPayments.totalprice%TYPE,
cby tblpayments.createdby%TYPE,
qty tblpayments.totalqty%TYPE

)
IS
BEGIN

    INSERT INTO tblPayments(customerid,totalprice,createdby,totalqty) VALUES
    (id,total,cby,qty);

END;


/
--------------------------------------------------------
--  DDL for Procedure ADDPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDPRODUCT" (
    namne tblProducts.ProductName%TYPE,
    descript tblProducts.description%TYPE,
    bcode tblProducts.barcode%TYPE,
    q tblProducts.qty%TYPE,
    pricein tblProducts.unitpricein%TYPE,
    priceout tblProducts.unitpriceout%TYPE,
    img tblProducts.PRODUCTIMAGE%TYPE,
    cby tblProducts.createdby%TYPE,
        catid tblProducts.categoryid%TYPE
    )
IS
    BEGIN

    INSERT INTO tblProducts(ProductName,description,barcode,qty,unitpricein,unitpriceout,PRODUCTIMAGE,isdeleted,createddate,createdby,categoryid)
    VALUES (namne,descript,bcode,q,pricein,priceout,img,0,SYSDATE,cby,catid) ;

END;


/
--------------------------------------------------------
--  DDL for Procedure ADDPURCHASEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDPURCHASEDETAILS" 
(
id  tblPurchaseDetails.PurchaseID%TYPE,
pid tblPurchaseDetails.ProductID%TYPE,
qty tblPurchaseDetails.PurchaseQty%TYPE, 
cby tblPurchaseDetails.createdby%TYPE
)
IS
BEGIN
    INSERT INTO tblPurchaseDetails(PurchaseID, ProductID, PurchaseQty, CreatedDate,Createdby)
    VALUES(id,pid,qty,sysdate,cby);
END;


/
--------------------------------------------------------
--  DDL for Procedure ADDSALESDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADDSALESDETAILS" (

sid tblSalesDetails.OrderiD % TYPE,
pid tblSalesDetails.ProductID %TYPE,
qty tblSalesDetails.qtysales %TYPE,
cby tblSalesDetails.createdby %TYPE

)
IS
BEGIN
      INSERT INTO tblSalesDetails(OrderiD, ProductID, qtysales, createddate,createdby)
      VALUES(sid,pid,qty,sysdate,cby);
END;


/
--------------------------------------------------------
--  DDL for Procedure ADMINSEARCHORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ADMINSEARCHORDER" 
(
    name varchar2
)
IS
c1 sys_refcursor;

BEGIN
    open c1 for
SELECT * FROM VIEW_Order_for_admin WHERE LOWER(ITEM) LIKE '%' || LOWER(name) || '%';

    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure ALLORDERFORADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."ALLORDERFORADMIN" 

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT * FROM VIEW_ALL_ORDER_ADMIN;
    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure AVAILABLEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."AVAILABLEPRODUCT" 

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT 
    COUNT(productid) as available
FROM tblproducts where isdeleted = 0;

    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure CHANGEPASSWORD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."CHANGEPASSWORD" (
uname tblCustomers.email%TYPE,
pass tblcustomers.password%TYPE
)
IS
BEGIN
        UPDATE tblCustomers SET email=uname, password=pass Where email=uname;
END;


/
--------------------------------------------------------
--  DDL for Procedure CHANGEPASSWORDEMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."CHANGEPASSWORDEMPLOYEE" (
uname tblEmployees.username%TYPE,
pass tblEmployees.password%TYPE
)
IS
BEGIN
        UPDATE tblEmployees SET username=uname, password=pass Where username=uname;
END;


/
--------------------------------------------------------
--  DDL for Procedure CHANGEPROFILE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."CHANGEPROFILE" 
(
id tblcustomers.customerid%TYPE,
name varchar2,
em varchar2,
ph varchar2,
uby tblcustomers.updatedby%TYPE
)
IS
BEGIN

    update tblcustomers set customername = name, email=em , phone = ph, updateddate=sysdate, updatedby = uby where customerid = id;

END;


/
--------------------------------------------------------
--  DDL for Procedure CHARTSALE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."CHARTSALE" 
IS
c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM viewchatsale;
    dbms_sql.return_result(c1);

END;

/
--------------------------------------------------------
--  DDL for Procedure CHILD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."CHILD" 

IS
    c1 sys_refcursor;

BEGIN
    open c1 for 

 SELECT p.ProductID, p.ProductName as Name, p.ProductImage As Image, p.UnitPriceOut as Price
    FROM tblProducts p, tblCategories c WHERE p.categoryid=c.categoryid AND c.categoryname ='Child' AND p.Isdeleted=0;
    dbms_sql.return_result(c1);
END;

/
--------------------------------------------------------
--  DDL for Procedure COUNTORDERROW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."COUNTORDERROW" (
    id tblcustomers.customerid%TYPE
)

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT 
    SUM(orderqty) as qty
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid AND d.customerid = id AND d.status ='notpaid' Order By d.OrderID;

    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure CUSTOMERLOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."CUSTOMERLOGIN" 
(
    
    name tblCustomers.email%TYPE,
    pass tblCustomers.password%TYPE
)
IS
    c1 sys_refcursor;
BEGIN
    open c1 for

SELECT * FROM tblCustomers WHERE email = LOWER(name) AND password=pass ;

    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure DELETEADMINORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETEADMINORDER" 
(
    id tblorders.orderid%TYPE,
    uby tblorders.updatedby%TYPE

)

IS
    BEGIN

       update tblorders set status='Cancel', updateddate =sysdate, updatedby =uby where orderid = id ;


END;


/
--------------------------------------------------------
--  DDL for Procedure DELETECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETECATEGORY" (
ID tblcategories.categoryid%TYPE

    )
IS
    BEGIN

  DELETE FROM tblCategories where categoryid=id;


END;


/
--------------------------------------------------------
--  DDL for Procedure DELETECUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETECUSTOMER" (

id tblCustomers.CustomerID%TYPE

)
IS
BEGIN

   DELETE FROM tblCustomers WHERE CustomerID=id;

END;


/
--------------------------------------------------------
--  DDL for Procedure DELETEEMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETEEMPLOYEE" (
ID tblemployees.employeeid%TYPE

    )
IS
    BEGIN

  DELETE FROM tblemployees where employeeid=id;


END;


/
--------------------------------------------------------
--  DDL for Procedure DELETEMEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETEMEMBER" (

id tblMembers.memberid%TYPE

)
IS
BEGIN

   DELETE FROM tblMembers WHERE MemberID=id;

END;


/
--------------------------------------------------------
--  DDL for Procedure DELETEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETEORDER" (
id tblorders.orderid%TYPE ,
name tblorders.updatedby%type 
)
IS
BEGIN

   update tblorders set status ='Cancel', updateddate = sysdate, updatedby=name where orderid=id;

END;


/
--------------------------------------------------------
--  DDL for Procedure DELETEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETEPRODUCT" (
ID tblProducts.ProductID%TYPE

    )
IS
    BEGIN

 UPDATE tblProducts SET IsDeleted = 1 WHERE ProductID = ID;


END;


/
--------------------------------------------------------
--  DDL for Procedure DELETEPURCHASEADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETEPURCHASEADMIN" 
(
  id tblpurchase.purchaseid%TYPE
)
IS

BEGIN

 delete from tblpurchase where purchaseid= id;

END;


/
--------------------------------------------------------
--  DDL for Procedure DELETEPURCHASEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETEPURCHASEDETAILS" 
(
id  tblPurchaseDetails.PurchaseID%TYPE
)
IS
BEGIN
    DELETE FROM tblPurchaseDetails  WHERE PurchaseID=id;
END;


/
--------------------------------------------------------
--  DDL for Procedure DELETESALESDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DELETESALESDETAILS" (

id number

)
IS
BEGIN
       DELETE FROM VIEW_SALESDETAILS WHERE orderid = id;
END;


/
--------------------------------------------------------
--  DDL for Procedure DISCOUNTMEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."DISCOUNTMEMBER" (

id tblcustomers.customerid%TYPE
)
IS
 c1 sys_refcursor;
BEGIN
    open c1 for
   select discount from view_discount_member where customerid= id;
   dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure FINDPRODUCTPRICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."FINDPRODUCTPRICE" 
(

id tblproducts.productid%TYPE
)
IS
c1 sys_refcursor;
    BEGIN

   open c1 for
   select unitpriceout from tblproducts where productid = id;
   dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."LOGIN" 
(

    name tblemployees.username%TYPE,
    pass tblemployees.password%TYPE
)
IS
    c1 sys_refcursor;
BEGIN
    open c1 for

SELECT * FROM tblEmployees WHERE username = name AND password=pass;

    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure MONTHLYREPORTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."MONTHLYREPORTS" 
IS
c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM monthlyreport;
    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure REGISTERCUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."REGISTERCUSTOMER" 
(
    name tblcustomers.customername%TYPE,
    ph tblcustomers.phone%TYPE,
    em tblcustomers.email%TYPE,
    pass tblcustomers.password%TYPE,
    add tblcustomers.address%TYPE,
    cby tblcustomers.createdby%TYPE
)
IS
BEGIN

insert into tblcustomers (customername,phone,email,password,address,createddate,createdby) VALUES
(name,ph,em,pass,add,sysdate,cby);

END;


/
--------------------------------------------------------
--  DDL for Procedure RESTOREALLPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."RESTOREALLPRODUCT" 

IS
    BEGIN

 UPDATE tblProducts SET IsDeleted = 0;


END;


/
--------------------------------------------------------
--  DDL for Procedure RESTOREPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."RESTOREPRODUCT" (
ID tblProducts.ProductID%TYPE

    )
IS
    BEGIN

 UPDATE tblProducts SET IsDeleted = 0 WHERE ProductID = ID;


END;


/
--------------------------------------------------------
--  DDL for Procedure SALEITEMFORADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SALEITEMFORADMIN" 

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT 
    QTY FROM COUNT_ALL_Sales;
    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHADMINORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHADMINORDER" (
name varchar2

)
IS
 c1 sys_refcursor;
BEGIN

        open c1 for

        select * from view_order_for_admin where LOWER(ITEM) LIKE '%' || LOWER(name) || '%';
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHADMINPURCHASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHADMINPURCHASE" 
(
name varchar2
)
is
c1 sys_refcursor;
begin
open c1 for
select p.purchaseid as ID, p.itemname as name, e.employeename as staff, p.purchasedate, p.createddate, p.createdby, p.updateddate, p.updatedby from tblpurchase p, tblemployees e where p.employeeid = e.employeeid and
LOWER(p.itemname) LIKE '%' || LOWER(name) || '%' order by p.purchaseid desc;
dbms_sql.return_result(c1);
end;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHCATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHCATEGORY" (
name varchar2

    )
IS
    c1 sys_refcursor;
    BEGIN
        open c1 for 
  select * from tblcategories where LOWER(categoryname) LIKE '%' || LOWER(name) || '%';
        dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHCHILD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHCHILD" 
(

    pname VARCHAR2

)
IS
    c1 sys_refcursor;

BEGIN
    open c1 for 
        SELECT * FROM viewchild WHERE LOWER(name) LIKE '%' || LOWER(pname) || '%' ;
    dbms_sql.return_result(c1);
END;

/
--------------------------------------------------------
--  DDL for Procedure SEARCHCUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHCUSTOMER" (

name tblCustomers.CustomerName%TYPE

)
IS
    c1 sys_refcursor;
BEGIN
open c1 for
    select * from tblCustomers WHERE LOWER(CustomerName) LIKE '%' || LOWER(name) || '%';
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHEMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHEMPLOYEE" (

name varchar2

)
IS
    c1 sys_refcursor;
BEGIN
    Open c1 for

    SELECT * FROM tblEmployees WHERE LOWER(Employeename) LIKE '%' || LOWER(name) || '%' ;
    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHMALEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHMALEPRODUCT" 
(
    product varchar2
)
IS
    c1 sys_refcursor;

BEGIN
    open c1 for 

    select * from maleclothe where LOWER(name) LIKE '%' || LOWER(product) || '%';
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHMEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHMEMBER" (

name tblMembers.membername%TYPE

)
IS
    c1 sys_refcursor;
BEGIN
    Open c1 for

    SELECT * FROM tblMembers WHERE LOWER(MemberName) LIKE '%' || LOWER(name) || '%' ;
    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHORDER" (
name varchar2 ,
id tblorders.customerid %TYPE
)
IS
 c1 sys_refcursor;
BEGIN

    open c1 for 
    SELECT * FROM vieworder2 where LOWER(ITEM) like '%' || LOWER(name) || '%' AND customerid = id ;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHPRODUCT" 
(
    name tblProducts.ProductName%TYPE
)
IS
    c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM tblProducts WHERE LOWER(ProductName) LIKE '%' || LOWER(name) || '%';

   dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHPURCHASEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHPURCHASEDETAILS" 
(
    name tblProducts.ProductName %TYPE
)
IS
    c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM VIEW_PURCHASEDETAILS WHERE LOWER(ProductName) LIKE '%' || LOWER(name) || '%';

   dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHSALESDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHSALESDETAILS" (

name varchar2

)
IS
    c1 sys_refcursor;
BEGIN
    open c1 for
     SELECT * FROM VIEW_SALESDETAILS WHERE LOWER(ProductName) LIKE '%' || LOWER(name) || '%';

     dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SEARCHWOMANCLOTHES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SEARCHWOMANCLOTHES" 
(

    pname VARCHAR2

)
IS
    c1 sys_refcursor;

BEGIN
    open c1 for 
        SELECT * FROM view_product_search WHERE LOWER(name) LIKE '%' || LOWER(pname) || '%' ;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SELECTPRODUCTPRICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SELECTPRODUCTPRICE" 
(
 id tblproducts.productid%TYPE

)
IS
 c1 sys_refcursor;

BEGIN
    open c1 for
    SELECT unitpriceout from tblproducts where productid = id;
    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWADMINEARNING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWADMINEARNING" 

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT TOTAL FROM VIEW_TOTAL_EARNING;
    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWADMINEMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWADMINEMPLOYEE" 
is
c1 sys_refcursor;
begin
open c1 for
select * FROM tblemployees;
dbms_sql.return_result(c1);
end;


/
--------------------------------------------------------
--  DDL for Procedure SHOWADMINPRODUCTCOMBO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWADMINPRODUCTCOMBO" 
IS
 c1 sys_refcursor;

BEGIN
    open c1 for
    SELECT PRODUCTID , PRODUCTNAME, unitpriceout FROM tblProducts;
    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWADMINPURCHASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWADMINPURCHASE" 
is
c1 sys_refcursor;
begin
open c1 for
select * from view_admin_purchase;
dbms_sql.return_result(c1);
end;


/
--------------------------------------------------------
--  DDL for Procedure SHOWALLPAYMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWALLPAYMENT" 
(

cid tblpayments.customerid%TYPE
)
is
    c1 sys_refcursor;
begin

open c1 for

SELECT 
    PaymentID,CustomerID as CustomerID, paymenttype, TotalQty as ItemQty, totalprice as AmountUSD,createddate as PaidDate
FROM 
    tblPayments where customerid = cid  order by PaymentID DESC;
    dbms_sql.return_result(c1);
end;


/
--------------------------------------------------------
--  DDL for Procedure SHOWALLPRODUCTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWALLPRODUCTS" 

IS
    c1 sys_refcursor;

BEGIN
    open c1 for 

    select * from view_product_search;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWALLPRODUCTSCHILD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWALLPRODUCTSCHILD" 

IS
    c1 sys_refcursor;

BEGIN
    open c1 for 

    select * from view_product_search_child;
    dbms_sql.return_result(c1);
END;

/
--------------------------------------------------------
--  DDL for Procedure SHOWCATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWCATEGORY" 
IS
	C1 sys_refcursor;
begin
	open c1 for
select * from tblCategories;
	dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWCHILD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWCHILD" 

IS
    c1 sys_refcursor;

BEGIN
    open c1 for 

    select * from viewchild;
    dbms_sql.return_result(c1);
END;

/
--------------------------------------------------------
--  DDL for Procedure SHOWCOMPBOPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWCOMPBOPRODUCT" 
IS
    c1 sys_refcursor;
BEGIN
    open c1 for
    select * from  tblproducts;

     dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWCUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWCUSTOMER" 
IS
    c1 sys_refcursor;
BEGIN
open c1 for
   select tblCustomers.CustomerID, tblCustomers.CustomerName,tblCustomers.JobTitle,tblcustomers.phone, tblCustomers.email, tblcustomers.password,
  tblcustomers.address,tblMembers.MemberName, tblCustomers.CreatedDate, tblcustomers.CreatedBy, tblCustomers.Updateddate
  , tblcustomers.updatedby from tblCustomers,tblMembers WHERE tblCustomers.MemberID = tblMembers.MemberID AND tblCustomers.CustomerID > 0 ORDER BY tblcustomers.customerid DESC;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWEMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWEMPLOYEE" 
IS
    c1 SYS_REFCURSOR;
BEGIN

OPEN c1 FOR
SELECT * FROM tblEmployees ORDER BY employeeid DESC;
dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWFEMALECLOTHE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWFEMALECLOTHE" 

IS
    c1 sys_refcursor;

BEGIN
    open c1 for 

    SELECT tblProducts.ProductName, tblProducts.ProductImage, tblproducts.unitpriceout as price FROM tblProducts,tblcategories WHERE tblProducts.categoryid=tblcategories.categoryid AND
    tblcategories.categoryid=1 order by tblcategories.categoryid;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWFORMODERCUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWFORMODERCUSTOMER" 

IS
c1 sys_refcursor;
    BEGIN

   open c1 for
   select customerid, customername from tblcustomers ;
   dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWINVOICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWINVOICE" (
    cid tblcustomers.customerid%TYPE
)

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

        SELECT * FROM invoice where customerid = cid order by ID desc;

    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWINVOICETOTAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWINVOICETOTAL" (
    cid tblcustomers.customerid%TYPE
)

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

        SELECT SUM(totalprice) as totalamount FROM invoice where customerid = cid ;

    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWITEMADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWITEMADMIN" 

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT qty FROM VIEW_ITEM_ADMIN;
    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWMALEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWMALEPRODUCT" 

IS
    c1 sys_refcursor;

BEGIN
    open c1 for 

    select * from maleclothe;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWMEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWMEMBER" 
IS
    c1 sys_refcursor;
BEGIN
open c1 for
   select * from tblMembers;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWORDER" (
    id tblcustomers.customerid%TYPE
)

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT 
    d.orderid as ID, a.productname as Item, (d.productcolor)as Color, (d.productsize) as ItemSize, d.orderqty as Quantity
    , (a.unitpriceout) AS UnitPrice, d.totalprice, a.productimage as img
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid AND d.customerid = id AND d.status ='notpaid' Order By d.OrderID DESC;

    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWORDERFORMADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWORDERFORMADMIN" 
IS
 c1 sys_refcursor;

BEGIN
    open c1 for
SELECT * from view_order_for_admin;


    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWPAYMENTADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWPAYMENTADMIN" 
IS
 c1 sys_refcursor;
BEGIN

        open c1 for

       select * from view_payment_for_admin;
    dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWPRODUCT" 

IS
   C1 sys_refcursor;
BEGIN
    Open C1 for 
    SELECT tblProducts.ProductID, tblProducts.ProductName, tblProducts.Description,
    tblCategories.CategoryName, tblProducts.Qty, tblProducts.Barcode, tblProducts.UnitPriceIn, tblProducts.UnitPriceOut,
    tblProducts.CreatedDate, tblProducts.CreatedBy, tblProducts.UpdatedDate, tblproducts.updatedby, tblproducts.productimage
    FROM tblProducts , tblCategories
    Where tblProducts.CategoryID=tblCategories.CategoryID AND tblProducts.Isdeleted = 0 Order By tblProducts.ProductID DESC;
 dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWPRODUCTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWPRODUCTS" 

IS
    c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM tblproducts;

   dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWPURCHASEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWPURCHASEDETAILS" 

IS
    c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM VIEW_PURCHASEDETAILS;

   dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWPURCHASES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWPURCHASES" 

IS
    c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM tblPurchase;

   dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWQTYUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWQTYUSER" 
(
cid tblpayments.customerid%TYPE
)

is
    c1 sys_refcursor;
begin

open c1 for

select  SUM(itemqty) as qty from view_all_payments where id=cid;
    dbms_sql.return_result(c1);
end;


/
--------------------------------------------------------
--  DDL for Procedure SHOWRESTOREPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWRESTOREPRODUCT" 

IS
   C1 sys_refcursor;
BEGIN
    Open C1 for 
    SELECT tblProducts.ProductID, tblProducts.ProductName, tblProducts.Description,
    tblCategories.CategoryName, tblProducts.Qty, tblProducts.Barcode, tblProducts.UnitPriceIn, tblProducts.UnitPriceOut,
    tblProducts.CreatedDate, tblProducts.CreatedBy, tblProducts.UpdatedDate, tblproducts.updatedby, tblproducts.productimage
    FROM tblProducts , tblCategories
    Where tblProducts.CategoryID=tblCategories.CategoryID AND tblProducts.Isdeleted = 1;
 dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWSALEID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWSALEID" 
IS
    c1 sys_refcursor;
BEGIN
    open c1 for
    select * from tblorders;

     dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWSALEREPORT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWSALEREPORT" 
IS
c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM Dailyreport;
    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWSALESDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWSALESDETAILS" 
IS
    c1 sys_refcursor;
BEGIN
       Open c1  for
    Select * from VIEW_SALESDETAILS;
     dbms_sql.return_result(c1);
END;


/
--------------------------------------------------------
--  DDL for Procedure SHOWUSERPAYMENTAMOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SHOWUSERPAYMENTAMOUNT" 
(
cid tblpayments.customerid%TYPE
)

is
    c1 sys_refcursor;
begin

open c1 for

select  SUM(amountusd) as payment from view_all_payments where ID=cid;
    dbms_sql.return_result(c1);
end;


/
--------------------------------------------------------
--  DDL for Procedure SUMTOTALORDERPRICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."SUMTOTALORDERPRICE" (
    id tblcustomers.customerid%TYPE
)

IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   SELECT 
    SUM(totalprice) as totalamount
FROM tblOrders d, tblProducts a, tblCustomers c WHERE d.ProductID = a.productid AND d.customerid = c.customerid AND d.customerid = id AND d.status ='notpaid' Order By d.OrderID;

    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure TODAYORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."TODAYORDER" 
(
cid tblorders.customerid%TYPE
)
IS

    c1 sys_refcursor;
BEGIN

    open c1 for

   select o.orderid as ID, p.productname as name , o.orderqty as quantity, p.unitpriceout as unitprice, totalprice, o.createddate as dates , p.productimage as img, o.status
   From tblorders o, tblproducts p, tblcustomers c WHERE o.productid = p.productid AND o.customerid = c.customerid  AND o.customerid = cid  Order by ID DESC ;

    dbms_sql.return_result(c1);

    END;


/
--------------------------------------------------------
--  DDL for Procedure TOPTHREE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."TOPTHREE" 
IS
c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM VIEWTOP3;
    dbms_sql.return_result(c1);

END;

/
--------------------------------------------------------
--  DDL for Procedure UNDOADMINORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UNDOADMINORDER" 
(
    id tblorders.orderid%TYPE,
    uby tblorders.updatedby%TYPE

)

IS
    BEGIN

       update tblorders set status='notpaid', updateddate =sysdate, updatedby =uby where orderid = id ;


END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEADMINORDERFORM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEADMINORDERFORM" 
(
    id tblorders.orderid%TYPE,
    cid tblorders.customerid%TYPE,
    pid tblorders.productid%TYPE,
    psize tblorders.productsize%TYPE,
    pcolor tblorders.productcolor%TYPE,
    qty tblorders.orderqty%TYPE,
    total tblorders.totalprice%TYPE,
    uby tblorders.updatedby%TYPE
)

IS
    BEGIN

       update tblorders set customerid=cid,productid=pid,productsize=psize,productcolor=pcolor,orderqty=qty,totalprice=total
       ,updateddate=sysdate,updatedby=uby where orderid = id ;


END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEADMINPAYMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEADMINPAYMENT" 
(
    id tblorders.orderid%TYPE,
    uby tblorders.updatedby%TYPE

)

IS
    BEGIN

       update tblorders set status='paid', updateddate =sysdate, updatedby =uby where orderid = id ;


END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATECATEGORY" (
    vID tblcategories.categoryid%TYPE,
    vCateName tblcategories.categoryname%TYPE,
    vDesc tblcategories.description%TYPE,
    vUpdatedby tblcategories.updatedby%TYPE
    )
IS
    BEGIN

    UPDATE tblCategories set categoryname=vcatename, description = vdesc , 
    updateddate=SYSDATE, updatedby = vupdatedby where categoryid = vid;



END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATECUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATECUSTOMER" (
cid tblCustomers.CustomerID%TYPE,
name tblCustomers.CustomerName%TYPE,
job tblCustomers.jobtitle%TYPE,
ph tblCustomers.Phone%TYPE,
em tblCustomers.Email%TYPE,
pass tblcustomers.password%TYPE,
add tblCustomers.Address %TYPE,
id tblCustomers.MemberID%TYPE,
uby tblCustomers.UpdatedBy%TYPE
)
IS
BEGIN
  Update tblCustomers Set CustomerName=name,JobTitle=job,Phone=ph,Email=em,password=pass,Address=add,MemberID=id,UpdatedDate=sysdate,updatedby=uby
  WHERE CustomerID = cid;
END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEEMPLOYEE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEEMPLOYEE" (
    id tblemployees.employeeid%TYPE,
   ename tblemployees.employeename%TYPE,
    uname tblemployees.username%TYPE,
    password tblemployees.password%TYPE,
    utype tblemployees.usertype%TYPE,
    role tblemployees.role%TYPE,
    title tblemployees.jobtitle%TYPE,
    email tblemployees.email%TYPE,
    phone tblemployees.phone%TYPE,
    address tblemployees.address%TYPE,
   updateby tblemployees.updatedby%TYPE,
   img tblemployees.photo%TYPE
    )
IS
    BEGIN

    UPDATE tblemployees SET employeename=ename ,username=uname,password=password,usertype=utype,role=role,
    jobtitle=title,email=email,phone=phone,address=address,updateddate =sysdate,
    updatedby=updateby,photo=img WHERE employeeid = id;

END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEMEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEMEMBER" (
id tblmembers.memberid % TYPE,
name tblMembers.membername%TYPE,
dis tblMembers.Discount%TYPE,
uby tblMembers.CreatedBy%TYPE
)
IS
BEGIN

    UPDATE tblmembers set MemberName = name, discount = dis, updatedDate= sysdate,Updatedby = uby WHERE MemberID= id;
END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEORDERS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEORDERS" (
id tblOrders.orderid%TYPE,
color tblorders.productcolor%TYPE,
siz tblorders.productsize%TYPE,
qty tblOrders.orderqty%TYPE,
total tblorders.totalprice%TYPE,
uby tblOrders.updatedby%TYPE
)
IS

BEGIN

    update tblorders set productcolor=color, productsize=siz,orderqty=qty,totalprice=total,updateddate=sysdate, updatedby = uby where orderid=id;

END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEPAYMENTFORORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEPAYMENTFORORDER" (

id tblorders.customerid%TYPE,
uby tblorders.updatedby%TYPE
)
IS
BEGIN
    UPDATE  tblOrders SET status = 'Paid', updatedby=uby WHERE status='notpaid' AND customerid=id;
END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEPRODUCT" (
    id tblProducts.ProductID%TYPE,
    namne tblProducts.ProductName%TYPE,
    descript tblProducts.description%TYPE,
    catid tblProducts.categoryid%TYPE,
    bcode tblProducts.barcode%TYPE,
    q tblProducts.qty%TYPE,
    pricein tblProducts.unitpricein%TYPE,
    priceout tblProducts.unitpriceout%TYPE,
    img tblProducts.PRODUCTIMAGE%TYPE,
    uby tblProducts.updatedby%TYPE
    )
IS
    BEGIN

    UPDATE tblProducts SET ProductName=namne,description=descript,categoryid=catid,barcode=bcode,
  qty=q,unitpricein=pricein,unitpriceout=priceout,PRODUCTIMAGE=img,updateddate = SYSDATE,
    updatedby = uby WHERE productid = id ;

END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEPURCHASE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEPURCHASE" 
(
    id tblPurchase.PurchaseID%TYPE,
   empid tblPurchase.Employeeid%TYPE,
   item tblPurchase.itemname%TYPE,
   pdate tblPurchase.purchasedate%TYPE,
    uby tblPurchase.UpdatedBy%TYPE
)
IS

BEGIN

    UPDATE tblPurchase SET EmployeeID=empid, itemname=item, PurchaseDate=pdate, Updateddate=SYSDATE,
    updatedby = uby WHERE purchaseid=id;


END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATEPURCHASEDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATEPURCHASEDETAILS" 
(
id  tblPurchaseDetails.PurchaseID%TYPE,
pid tblPurchaseDetails.ProductID%TYPE,
qty tblPurchaseDetails.PurchaseQty%TYPE, 
uby tblPurchaseDetails.updatedby%TYPE

)
IS
BEGIN
  UPDATE tblPurchaseDetails SET ProductID = pid, PurchaseQty=qty,UpdatedDate = sysdate, UpdatedBy = uby WHERE PurchaseID=id;
END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATESALESDETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."UPDATESALESDETAILS" (

id tblSalesDetails.orderid % TYPE,
pid tblSalesDetails.ProductID %TYPE,
qty tblSalesDetails.qtysales %TYPE,
uby tblSalesDetails.updatedby %TYPE

)
IS
BEGIN
       UPDATE tblSalesDetails SET orderid = id, ProductID= pid, qtysales=qty
       ,updateddate = sysdate, updatedby = uby WHERE orderid = id;
END;


/
--------------------------------------------------------
--  DDL for Procedure WEEKLYREPORTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CLOTHE"."WEEKLYREPORTS" 
IS
c1 sys_refcursor;
BEGIN
    open c1 for
    SELECT * FROM weeklyreport;
    dbms_sql.return_result(c1);

END;


/
--------------------------------------------------------
--  Constraints for Table TBLCUSTOMERS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLCUSTOMERS" MODIFY ("CUSTOMERID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLCUSTOMERS" ADD CONSTRAINT "TBLCUSTOMER_PK" PRIMARY KEY ("CUSTOMERID")
  USING INDEX "CLOTHE"."TBLCUSTOMER_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLEMPLOYEES
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLEMPLOYEES" MODIFY ("EMPLOYEEID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLEMPLOYEES" MODIFY ("EMPLOYEENAME" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLEMPLOYEES" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLEMPLOYEES" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLEMPLOYEES" ADD CONSTRAINT "TBLEMPLOYEES_PK" PRIMARY KEY ("EMPLOYEEID")
  USING INDEX "CLOTHE"."TBLEMPLOYEES_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLSALESDETAILS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLSALESDETAILS" MODIFY ("ORDERID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLSALESDETAILS" MODIFY ("PRODUCTID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLSALESDETAILS" ADD CONSTRAINT "TBLSALESDETAILS_PK" PRIMARY KEY ("ORDERID", "PRODUCTID")
  USING INDEX "CLOTHE"."TBLSALESDETAILS_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLPURCHASEDETAILS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPURCHASEDETAILS" MODIFY ("PURCHASEID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPURCHASEDETAILS" MODIFY ("PRODUCTID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPURCHASEDETAILS" ADD CONSTRAINT "TBLPURCHASEDETAILS_PK" PRIMARY KEY ("PURCHASEID", "PRODUCTID")
  USING INDEX "CLOTHE"."TBLPURCHASEDETAILS_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLMEMBERS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLMEMBERS" MODIFY ("MEMBERID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLMEMBERS" MODIFY ("MEMBERNAME" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLMEMBERS" ADD CONSTRAINT "TBLMEMBER_PK" PRIMARY KEY ("MEMBERID")
  USING INDEX "CLOTHE"."TBLMEMBER_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLPURCHASE
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPURCHASE" MODIFY ("PURCHASEID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPURCHASE" MODIFY ("EMPLOYEEID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPURCHASE" MODIFY ("ITEMNAME" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPURCHASE" ADD CONSTRAINT "TBLPURCHASE_PK" PRIMARY KEY ("PURCHASEID")
  USING INDEX "CLOTHE"."TBLPURCHASE_PK"  ENABLE;
  ALTER TABLE "CLOTHE"."TBLPURCHASE" MODIFY ("PURCHASEDATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBLORDERS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLORDERS" MODIFY ("ORDERID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLORDERS" ADD CONSTRAINT "TBLORDERS_PK" PRIMARY KEY ("ORDERID")
  USING INDEX "CLOTHE"."TBLORDERS_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLPAYMENTS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPAYMENTS" MODIFY ("PAYMENTID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPAYMENTS" ADD CONSTRAINT "TBLPAYMNET_PK" PRIMARY KEY ("PAYMENTID")
  USING INDEX "CLOTHE"."TBLPAYMNET_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLCATEGORIES
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLCATEGORIES" MODIFY ("CATEGORYID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLCATEGORIES" MODIFY ("CATEGORYNAME" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLCATEGORIES" ADD CONSTRAINT "TBLCATEGORIES_PK" PRIMARY KEY ("CATEGORYID")
  USING INDEX "CLOTHE"."TBLCATEGORIES_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBLPRODUCTS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPRODUCTS" MODIFY ("PRODUCTID" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPRODUCTS" MODIFY ("PRODUCTNAME" NOT NULL ENABLE);
  ALTER TABLE "CLOTHE"."TBLPRODUCTS" ADD CONSTRAINT "TBLPRODUCT_PK" PRIMARY KEY ("PRODUCTID")
  USING INDEX "CLOTHE"."TBLPRODUCT_PK"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBLCUSTOMERS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLCUSTOMERS" ADD CONSTRAINT "FK_CUSTOMER_MEMBER" FOREIGN KEY ("MEMBERID")
	  REFERENCES "CLOTHE"."TBLMEMBERS" ("MEMBERID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBLORDERS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLORDERS" ADD CONSTRAINT "FK_ORDER_CUS" FOREIGN KEY ("CUSTOMERID")
	  REFERENCES "CLOTHE"."TBLCUSTOMERS" ("CUSTOMERID") ENABLE;
  ALTER TABLE "CLOTHE"."TBLORDERS" ADD CONSTRAINT "FK_ORDER_PRODUCT" FOREIGN KEY ("PRODUCTID")
	  REFERENCES "CLOTHE"."TBLPRODUCTS" ("PRODUCTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBLPAYMENTS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPAYMENTS" ADD CONSTRAINT "FK_PAY_CUS" FOREIGN KEY ("CUSTOMERID")
	  REFERENCES "CLOTHE"."TBLCUSTOMERS" ("CUSTOMERID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBLPRODUCTS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPRODUCTS" ADD CONSTRAINT "FK_CAT_PRODUCT" FOREIGN KEY ("CATEGORYID")
	  REFERENCES "CLOTHE"."TBLCATEGORIES" ("CATEGORYID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBLPURCHASE
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPURCHASE" ADD CONSTRAINT "PURCHASE_EMPLOYEE_FK" FOREIGN KEY ("EMPLOYEEID")
	  REFERENCES "CLOTHE"."TBLEMPLOYEES" ("EMPLOYEEID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBLPURCHASEDETAILS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLPURCHASEDETAILS" ADD CONSTRAINT "FK_PURCHASEDETAIL_PURCHASE" FOREIGN KEY ("PURCHASEID")
	  REFERENCES "CLOTHE"."TBLPURCHASE" ("PURCHASEID") ENABLE;
  ALTER TABLE "CLOTHE"."TBLPURCHASEDETAILS" ADD CONSTRAINT "FK_PURCHASEDETAIL_PRODUCT" FOREIGN KEY ("PRODUCTID")
	  REFERENCES "CLOTHE"."TBLPRODUCTS" ("PRODUCTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBLSALESDETAILS
--------------------------------------------------------

  ALTER TABLE "CLOTHE"."TBLSALESDETAILS" ADD CONSTRAINT "FK_SALE_ORDER" FOREIGN KEY ("ORDERID")
	  REFERENCES "CLOTHE"."TBLORDERS" ("ORDERID") ENABLE;
  ALTER TABLE "CLOTHE"."TBLSALESDETAILS" ADD CONSTRAINT "FK_SALE_PRODUCT" FOREIGN KEY ("PRODUCTID")
	  REFERENCES "CLOTHE"."TBLPRODUCTS" ("PRODUCTID") ENABLE;
